@page
@using System.Linq.Expressions;
@using System.Reflection;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text;
@using SearchSample;
@model IndexModel
@{
    ViewData["Title"] = "Home page";

    var sortByColumnHtmlFormName = Html.NameFor(m => m!.Search!.SortBy!.Name);
    var sortByDirectionHtmlFormName = Html.NameFor(m => m!.Search!.SortBy!.Direction);

    var pageIndexHtmlFormName = Html.NameFor(m => m!.Search!.Paging!.Page);
    var pageSizeHtmlFormName = Html.NameFor(m => m!.Search!.Paging!.Size);

    IDictionary<string, string> ApplySortingQueryParameterDictionaryFor<T>(Expression<Func<IndexModel, T>> expression)
    {
        var sortCol = Html.NameFor(expression);

        return HttpContext.Request.QueryString.ApplySortingQueryParameterDictionary(
            pageIndexHtmlFormName, 
            sortByColumnHtmlFormName, 
            sortByDirectionHtmlFormName, 
            sortCol);
    }

    async Task RenderSortColumnHeader<T>(Expression<Func<IndexModel, T>> expression)
    {
        if (Html.IsSortableColumn(expression))
        {
            @if (Html.IsSortedByColumn(sortByColumnHtmlFormName, sortByDirectionHtmlFormName, expression))
            {
                if (Model!.Search!.SortBy!.Direction == SortDirectionOption.Asc)
                {
                    <text>&#8593; </text>
                }
                else
                {
                    <text>&#8595; </text>
                }
            }
            <a asp-page="Index" asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(expression)">
                @Html.DisplayNameFor(expression)
            </a>
        }
        else
        {
            <span>
                @Html.DisplayNameFor(expression)
            </span>
        }
    }
}


<form asp-page="Index" asp-antiforgery="false" method="get" asp-all-route-data="@HttpContext.Request.QueryString.ApplyPagingQueryParameterDictionary(pageIndexHtmlFormName, pageSizeHtmlFormName, 1)">
    <editor for="Search" />
    <button class="btn btn-primary" type="submit">Submit</button>
</form>

<p>
<table class="table table-responsive-lg">
    <tr>
        <th>
            @{ await RenderSortColumnHeader(m => m.Data!.First().GivenName); }
        </th>
        <th>
            @{ await RenderSortColumnHeader(m => m.Data!.First().FamilyName); }
        </th>
        <th>
            @{ await RenderSortColumnHeader(m => m.Data!.First().EmailAddress); }
        </th>
        <th>
            @{ await RenderSortColumnHeader(m => m.Data!.First().State); }
        </th>
        <th>
            @{ await RenderSortColumnHeader(m => m.Data!.First().IsArchived); }
        </th>
    </tr>
    @foreach(var item in Model!.Data ?? Enumerable.Empty<DataModel>())
    {
        <tr>
            <td asp-display-for="@item.GivenName"></td>
            <td asp-display-for="@item.FamilyName"></td>
            <td asp-display-for="@item.EmailAddress"></td>
            <td asp-display-for="@item.State"></td>
            <td asp-display-for="@item.IsArchived"></td>
        </tr>
    }
    </table>
</p>

<p>
    @{
        var prevDisabled = !Model.Data!.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Data.HasNextPage ? "disabled" : "";
    }

    <a asp-page="Index" asp-all-route-data="@HttpContext.Request.QueryString.ApplyPagingQueryParameterDictionary(pageIndexHtmlFormName, pageSizeHtmlFormName, Model.Data.PageIndex - 1)" class="btn btn-default @prevDisabled">Previous</a>
    <span>Page @Model.Data.PageIndex of @Model.Data.TotalPages</span>
    <a asp-page="Index" asp-all-route-data="@HttpContext.Request.QueryString.ApplyPagingQueryParameterDictionary(pageIndexHtmlFormName, pageSizeHtmlFormName, Model.Data.PageIndex + 1)" class="btn btn-default @nextDisabled">Next</a>
</p>