@page
@using System.Linq.Expressions;
@using System.Reflection;
@using Microsoft.AspNetCore.WebUtilities;
@using System.Text;
@model IndexModel
@{
    ViewData["Title"] = "Home page";

    IDictionary<string, string> ApplySortingQueryParameterDictionaryFor<T>(Expression<Func<IndexModel, T>> expression)
    {
        var sortCol = Html.NameFor(expression);

        return ApplySortingQueryParameterDictionary(sortCol);
    }

    IDictionary<string, string> ApplySortingQueryParameterDictionary(string? sortCol = null)
    {
        var removeParams = new[] { Html.NameFor(m => m!.Search!.Paging!.Page) };

        var qs = QueryHelpers.ParseQuery(Request.QueryString.ToUriComponent());

        foreach(var p in removeParams)
        {
            qs.Remove(p);
        }

        if (qs == null)
        {
            return new Dictionary<string, string>();
        }

        var sName = Html.NameFor(m => m!.Search!.SortBy!.Name);
        var sDir = Html.NameFor(m => m!.Search!.SortBy!.Direction);

        var sortDir = (qs.ContainsKey(sName) && qs[sName] == sortCol) && qs.ContainsKey(sDir) && qs[sDir] == "asc" ? "desc" : "asc";

        qs[sName] = sortCol;
        qs[sDir] = sortDir;

        return qs.ToDictionary(s => s.Key, s => s.Value.ToString());
    }

    IDictionary<string, string> ApplyPagingQueryParameterDictionary(int page, int? size = null)
    {
        var qs = QueryHelpers.ParseQuery(Request.QueryString.ToUriComponent());

        if (qs == null)
        {
            return new Dictionary<string, string>();
        }

        var pageParam = Html.NameFor(m => m!.Search!.Paging!.Page);
        var sizeParam = Html.NameFor(m => m!.Search!.Paging!.Size);

        qs[pageParam] = page.ToString();

        if(size.HasValue)
        {
            qs[sizeParam] = size.ToString();
        }

        return qs.ToDictionary(s => s.Key, s => s.Value.ToString());
    }
}


<form asp-page="Index" asp-antiforgery="false" method="get" asp-all-route-data="@ApplyPagingQueryParameterDictionary(1)">
    <editor for="Search" />
    <button class="btn btn-primary" type="submit">Submit</button>
</form>

<p>
<table class="table table-responsive-lg">
    <tr>
        <th>
            <a asp-page="Index" 
                asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(m => m.Data!.First().GivenName)" 
                asp-display-name-for="@Model.Data!.First().GivenName"></a>
        </th>
        <th>
            <a asp-page="Index" 
            asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(m => m.Data!.First().FamilyName)" 
            asp-display-name-for="@Model.Data!.First().FamilyName"></a>
        </th>
        <th>
            <a asp-page="Index" 
                asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(m => m.Data!.First().EmailAddress)" 
                asp-display-name-for="@Model.Data!.First().EmailAddress"></a>
        </th>
        <th>
            <a asp-page="Index" 
            asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(m => m.Data!.First().State)" 
            asp-display-name-for="@Model.Data!.First().State">
            </a>
        </th>
        <th>
            <a asp-page="Index" 
            asp-all-route-data="@ApplySortingQueryParameterDictionaryFor(m => m.Data!.First().IsArchived)" 
            asp-display-name-for="@Model.Data!.First().IsArchived">
            </a>
        </th>
    </tr>
    @foreach(var item in Model!.Data ?? Enumerable.Empty<DataModel>())
    {
        <tr>
            <td asp-display-for="@item.GivenName"></td>
            <td asp-display-for="@item.FamilyName"></td>
            <td asp-display-for="@item.EmailAddress"></td>
            <td asp-display-for="@item.State"></td>
            <td asp-display-for="@item.IsArchived"></td>
        </tr>
    }
    </table>
</p>

<p>
    @{
        var prevDisabled = !Model.Data!.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Data.HasNextPage ? "disabled" : "";
    }

    <a asp-page="Index" asp-all-route-data="@ApplyPagingQueryParameterDictionary(Model.Data.PageIndex - 1)" class="btn btn-default @prevDisabled">Previous</a>
    <span>Page @Model.Data.PageIndex of @Model.Data.TotalPages</span>
    <a asp-page="Index" asp-all-route-data="@ApplyPagingQueryParameterDictionary(Model.Data.PageIndex + 1)" class="btn btn-default @nextDisabled">Next</a>
</p>